% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as-ts-dataloder.R
\name{as_ts_dataloader}
\alias{as_ts_dataloader}
\title{Quick shortcut to create a torch dataloader based on the given dataset}
\usage{
as_ts_dataloader(
  data,
  formula,
  index = NULL,
  key = NULL,
  predictors = NULL,
  outcomes = NULL,
  categorical = NULL,
  timesteps,
  horizon = 1,
  sample_frac = 1,
  scale = TRUE,
  batch_size,
  shuffle = FALSE,
  jump = 1,
  drop_last = TRUE,
  ...
)
}
\arguments{
\item{data}{(\code{data.frame}) An input data.frame object with.
For now only \strong{single} data frames are handled with no categorical features.}

\item{formula}{(\code{formula}) A formula describing, how to use the data}

\item{index}{(\code{character}) The index column name.}

\item{key}{(\code{character}) The key column name(s). Use only if formula was not specified.}

\item{predictors}{(\code{character}) Input variable names. Use only if formula was not specified.}

\item{outcomes}{(\code{character}) Target variable names. Use only if formula was not specified.}

\item{categorical}{(\code{character}) Categorical features.}

\item{timesteps}{(\code{integer}) The time series chunk length.}

\item{horizon}{(\code{integer}) Forecast horizon.}

\item{sample_frac}{(\code{numeric}) Sample a fraction of rows (default: 1, i.e.: all the rows).}

\item{scale}{(\code{logical} or \code{list}) Scale feature columns. Logical value or two-element list.
with values (mean, std)}

\item{batch_size}{(\code{numeric}) Batch size.}

\item{shuffle}{(\code{logical}) Shuffle examples.}

\item{drop_last}{(\code{logical}) Set to TRUE to drop the last incomplete batch,
if the dataset size is not divisible by the batch size.
If FALSE and the size of dataset is not divisible by the batch size,
then the last batch will be smaller. (default: TRUE)}
}
\description{
Quick shortcut to create a torch dataloader based on the given dataset
}
\examples{
library(rsample)
library(dplyr, warn.conflicts = FALSE)

suwalki_temp <-
   weather_pl \%>\%
   filter(station == "SWK") \%>\%
   select(date, temp = tmax_daily)

# Splitting on training and test
data_split <- initial_time_split(suwalki_temp)

train_dl <-
 training(data_split) \%>\%
 as_ts_dataloader(temp ~ date, timesteps = 20, horizon = 10, batch_size = 32)

train_dl

dataloader_next(dataloader_make_iter(train_dl))

}
