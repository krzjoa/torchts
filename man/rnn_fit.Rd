% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rnn-impl.R
\name{rnn_fit}
\alias{rnn_fit}
\title{RNN model for time series forecasting - \code{torchts} engine for \code{parsnip} API}
\usage{
rnn_fit(
  formula,
  data,
  learn_rate = 0.9,
  hidden_units,
  dropout = FALSE,
  timesteps = 20,
  horizon = 1,
  rnn_layer = nn_gru,
  optim = optim_adam(),
  validation = NULL,
  batch_size = 1,
  epochs = 10,
  scale = TRUE,
  loss_fn = nnf_mse_loss
)
}
\arguments{
\item{formula}{(\code{formula}) A formula describing, how to use the data}

\item{data}{(\code{data.frame}) A input data.frame.}

\item{learn_rate}{(\code{numeric}) Learning rate.}

\item{hidden_units}{(\code{integer}) Number of hidden units.}

\item{dropout}{(\code{logical}) Use dropout (default = FALSE).}

\item{timesteps}{(\code{integer}) Number of timesteps used to produce a forecast.}

\item{horizon}{(\code{integer}) Forecast horizon.}

\item{rnn_layer}{(\code{nn_rnn_base}) A \code{torch} recurrent layer.}

\item{optim}{(\code{function}) A function returning a \code{torch} optimizer (like \code{optim_adam})
or R expression like \code{optim_adam(amsgrad = TRUE)}. Such expression will be handled and feed with
\code{params} and \code{lr} arguments.}

\item{validation}{(\code{data.frame} or \code{numeric}) Validation dataset or percent of TODO.}

\item{batch_size}{(\code{integer}) Batch size.}

\item{epochs}{(\code{integer}) Number of epochs to train the network.}

\item{loss_fn}{(\code{function}) A \code{torch} loss function.}
}
\description{
RNN model for time series forecasting - \code{torchts} engine for \code{parsnip} API
}
\examples{
library(dplyr, warn.conflicts = FALSE)
library(torch)
library(torchts)
library(timetk)

# Preparing a dataset
# TODO: turn to tiny_m5


tarnow_temp <-
   weather_pl \%>\%
   filter(station == "TRN") \%>\%
   select(date, tmax_daily, tmin_daily, press_mean_daily, rr_type) \%>\%
   mutate(rr_type = ifelse(is.na(rr_type), "NA", rr_type))

# Splitting dataset
data_split <-
   time_series_split(
      tarnow_temp, date,
      initial = "18 years",
      assess  = "2 years",
      lag     = 20
   )

# Training a model
rnn_model <-
   rnn_fit(
     tmax_daily ~ date + tmax_daily + rr_type,
     data = training(data_split),
     hidden_units = 10,
     timesteps = 20,
     horizon   = 1,
     epochs = 1,
     batch_size = 32
   )

# Prediction
cleared_new_data <-
  testing(data_split) \%>\%
  clear_outcome(date, tmax_daily, 20)

forecast <- predict(rnn_model, cleared_new_data)



}
