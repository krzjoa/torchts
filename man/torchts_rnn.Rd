% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rnn-impl.R
\name{torchts_rnn}
\alias{torchts_rnn}
\title{RNN model for time series forecasting - \code{torchts} engine for \code{parsnip} API}
\usage{
torchts_rnn(
  formula,
  data,
  learn_rate = 0.9,
  hidden_units,
  dropout = FALSE,
  timesteps = 20,
  horizon = 1,
  jump = horizon,
  rnn_layer = nn_gru,
  optim = optim_adam(),
  validation = NULL,
  stateful = FALSE,
  batch_size = 1,
  epochs = 10,
  scale = TRUE,
  loss_fn = nnf_mse_loss,
  device = NULL
)
}
\arguments{
\item{formula}{(\code{formula}) A formula describing, how to use the data}

\item{data}{(\code{data.frame}) A input data.frame.}

\item{learn_rate}{(\code{numeric}) Learning rate.}

\item{hidden_units}{(\code{integer}) Number of hidden units.}

\item{dropout}{(\code{logical}) Use dropout (default = FALSE).}

\item{timesteps}{(\code{integer}) Number of timesteps used to produce a forecast.}

\item{horizon}{(\code{integer}) Forecast horizon.}

\item{jump}{(\code{interger}) Input window shift.}

\item{rnn_layer}{(\code{nn_rnn_base}) A \code{torch} recurrent layer.}

\item{optim}{(\code{function}) A function returning a \code{torch} optimizer (like \code{optim_adam})
or R expression like \code{optim_adam(amsgrad = TRUE)}. Such expression will be handled and feed with
\code{params} and \code{lr} arguments.}

\item{validation}{(\code{data.frame} or \code{numeric}) Validation dataset or percent of TODO.}

\item{stateful}{(\code{logical} or \code{list}) Determine network behaviour: is stateful or not.}

\item{batch_size}{(\code{integer}) Batch size.}

\item{epochs}{(\code{integer}) Number of epochs to train the network.}

\item{loss_fn}{(\code{function}) A \code{torch} loss function.}

\item{device}{(\code{character}) A \code{torch} device.}
}
\description{
RNN model for time series forecasting - \code{torchts} engine for \code{parsnip} API
}
\examples{
library(dplyr, warn.conflicts = FALSE)
library(torch)
library(torchts)
library(timetk)

# Preparing a dataset
tiny_m5_sample <-
  tiny_m5 \%>\%
  filter(item_id == "FOODS_3_586", store_id == "CA_1") \%>\%
  mutate(value = as.numeric(value))

tk_summary_diagnostics(tiny_m5_sample)
glimpse(tiny_m5_sample)

TIMESTEPS <- 20

data_split <-
  time_series_split(
    tiny_m5_sample, date,
    initial = "4 years",
    assess  = "1 year",
    lag     = TIMESTEPS
  )

# Training
rnn_model <-
  torchts_rnn(
    value ~ date + value + sell_price + wday,
    data = training(data_split),
    hidden_units = 10,
    timesteps = TIMESTEPS,
    horizon   = 1,
    epochs = 10,
    batch_size = 32
  )

# Prediction
cleared_new_data <-
  testing(data_split) \%>\%
  clear_outcome(date, value, TIMESTEPS)

forecast <-
  predict(rnn_model, cleared_new_data)

}
