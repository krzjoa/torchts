% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mlp-impl.R
\name{torchts_mlp}
\alias{torchts_mlp}
\title{MLP model for time series forecasting}
\usage{
torchts_mlp(
  formula,
  data,
  learn_rate = 0.001,
  hidden_units,
  dropout = FALSE,
  timesteps = 20,
  horizon = 1,
  jump = horizon,
  optim = optim_adam(),
  validation = NULL,
  stateful = FALSE,
  batch_size = 1,
  epochs = 10,
  shuffle = TRUE,
  scale = TRUE,
  sample_frac = 1,
  loss_fn = nn_mse_loss(),
  device = NULL
)
}
\arguments{
\item{formula}{(\code{formula}) A formula describing, how to use the data}

\item{data}{(\code{data.frame}) A input data.frame.}

\item{learn_rate}{(\code{numeric}) Learning rate.}

\item{hidden_units}{(\code{integer}) Number of hidden units.}

\item{timesteps}{(\code{integer}) Number of timesteps used to produce a forecast.}

\item{horizon}{(\code{integer}) Forecast horizon.}

\item{jump}{(\code{integer}) Input window shift.}

\item{optim}{(\code{function}) A function returning a \code{torch} optimizer (like \code{optim_adam})
or R expression like \code{optim_adam(amsgrad = TRUE)}. Such expression will be handled and feed with
\code{params} and \code{lr} arguments.}

\item{validation}{(\code{data.frame} or \code{numeric}) Validation dataset or percent of TODO.}

\item{batch_size}{(\code{integer}) Batch size.}

\item{epochs}{(\code{integer}) Number of epochs to train the network.}

\item{shuffle}{(\code{logical}) A dataloader argument - shuffle rows or not?}

\item{scale}{(\code{logical} or \code{list})}

\item{sample_frac}{(\code{numeric}) A fraction of time series to be sampled.}

\item{loss_fn}{(\code{function}) A \code{torch} loss function.}

\item{device}{(\code{character}) A \code{torch} device.}
}
\description{
MLP model for time series forecasting
}
\examples{
library(dplyr, warn.conflicts = FALSE)
library(torch)
library(torchts)
library(timetk)

# Preparing a dataset
tiny_m5_sample <-
  tiny_m5 \%>\%
  filter(item_id == "FOODS_3_586", store_id == "CA_1") \%>\%
  mutate(value = as.numeric(value))

tk_summary_diagnostics(tiny_m5_sample)
glimpse(tiny_m5_sample)

TIMESTEPS <- 20

data_split <-
  time_series_split(
    tiny_m5_sample, date,
    initial = "4 years",
    assess  = "1 year",
    lag     = TIMESTEPS
  )

# Training
mlp_model <-
  torchts_mlp(
    value ~ date + value + sell_price + wday,
    data = training(data_split),
    hidden_units = 10,
    timesteps = TIMESTEPS,
    horizon   = 1,
    epochs = 10,
    batch_size = 32
  )

# Prediction
cleared_new_data <-
  testing(data_split) \%>\%
  clear_outcome(date, value, TIMESTEPS)

forecast <-
  mlp_model \%>\%
  predict(cleared_new_data)

}
