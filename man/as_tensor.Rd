% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as-tensor.R
\name{as_tensor}
\alias{as_tensor}
\title{Convert a data.frame-like object to tensor}
\usage{
as_tensor(
  .data,
  ...,
  dtype = NULL,
  device = NULL,
  requires_grad = FALSE,
  pin_memory = FALSE
)
}
\arguments{
\item{.data}{A data.frame-like object}

\item{...}{Column names to wrap the data.frame-like object}

\item{dtype}{A torch_dtype instance}

\item{device}{A device created with torch_device()}

\item{requires_grad}{If autograd should record operations on the returned tensor.}

\item{pin_memory}{If set, returned tensor would be allocated in the pinned memory.}
}
\description{
The function converts an a data.frame-like object to torch_tensor instance.
If no column names are specified (as "three dots"), the function
simply transforms the input data to \code{matrix} and then to \code{torch_tensor}.

The second scenario assumes that we need a \code{torch_tensor},
which has more than two dimensions and some columns contains
indicators, how this wrapping should be performed.

It's especially useful when transforming a data.frame containing
multiple (and, possibly, multivariate) time series.
When passing optional column names, function:
\itemize{
\item arranges a data.frame by the given columns
\item removes these columns from the data.frame
\item creates a n-dimensional tensor with the following shape
(n_distinct(column_name_1), n_distinct(column_name_2), ..., number of other columns)
}
}
\examples{
# Simple data.frame-to-torch_tensor transformation
as_tensor(mtcars)

# Transformation with column-wise data wraping
library(dplyr)

euro_stock <-
  as.data.frame(EuStockMarkets) \%>\%
  mutate(idx = 1:n()) \%>\%
  tidyr::pivot_longer(c(DAX, SMI, CAC, FTSE))

euro_stock

euro_stock_tensor <-
  euro_stock \%>\%
  as_tensor(name, idx)

euro_stock_tensor$shape

}
